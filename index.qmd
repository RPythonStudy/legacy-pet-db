---
title: PET 준비기록 분석
author: BenKorea
description: "Access PET 판독과 준비기록을 매칭"
date: "2025-07-23"
date-modified: last-modified
toc-depth: 4
---


```{r}
#| label: setup
#| echo: false
#| message: false

# 프로젝트에 필요한 패키지들 일괄 호출
library(here)
library(readxl)
library(dplyr)
library(data.table)
library(ggplot2)

# ./R로부터 사용자정의함수들 호출
invisible(lapply(
  list.files(here::here("R"), pattern = "\\.R$", full.names = TRUE),
  source,
  encoding = "UTF-8"
))
```

```{r}
#| label: data-import
#| echo: false
#| message: false
#| warning: false

if (file.exists("./data/rds/readings_ocs.rds")) {
  readings_ocs <- readRDS("./data/rds/readings_ocs.rds")
} else {
  readings_ocs <- my_read_excel_dir(directory = "./data/raw/readings_ocs/", pattern = "\\.xlsx$")
  readings_ocs[, PtID := 환자번호]
  readings_ocs[, ReqDate := as.Date(처방일자)]
  readings_ocs[, ExamDate := as.Date(실시일시)]
  saveRDS(readings_ocs, "./data/rds/readings_ocs.rds")
}

if (file.exists("./data/rds/readings_pacs.rds")) {
  readings_pacs <- readRDS("./data/rds/readings_pacs.rds")
} else {
  readings_pacs <- my_read_excel_dir(directory = "./data/raw/readings_pacs/", pattern = "\\.xlsx$")
  readings_pacs[, PtID := ID]
  readings_pacs[, ReqDate := as.Date(as.numeric(`Req. Date`), origin = "1899-12-30")]
  readings_pacs[, ExamDate := as.Date(as.numeric(`Study Date`), origin = "1899-12-30")]
  saveRDS(readings_pacs, "./data/rds/readings_pacs.rds")
}

if (file.exists("./data/rds/readings_access.rds")) {
  readings_access <- readRDS("./data/rds/readings_access.rds")
} else {
  readings_access <- my_read_excel_dir(directory="./data/raw/readings_access/", pattern = "\\.xlsx$")
  readings_access[, ExamDate := as.Date(as.numeric(`ExamDate`), origin = "1899-12-30")]
  saveRDS(readings_access, "./data/rds/readings_access.rds")
}

# OCS PET 준비기록
if (file.exists("./data/rds/preparations_ocs.rds")) {
  preparations_ocs <- readRDS("./data/rds/preparations_ocs.rds")
} else {
  preparations_ocs <- my_read_excel_dir("./data/raw/preparations_ocs/", pattern = "\\.xlsx$")
  preparations_ocs[, PtID := 환자번호]
  preparations_ocs[, ExamDate := as.Date(검사일자)]
  saveRDS(preparations_ocs, "./data/rds/preparations_ocs.rds")
}

# Access PET 준비기록
if (file.exists("./data/rds/preparations_access.rds")) {
  preparations_access <- readRDS("./data/rds/preparations_access.rds")
} else {
  preparations_access <- my_read_excel_dir(directory="./data/raw/preparations_access/", pattern = "\\.xlsx$")
  preparations_access[, ExamDate := as.Date(as.numeric(`ExamDate`), origin = "1899-12-30")]
  saveRDS(preparations_access, "./data/rds/preparations_access.rds")
}
```

```{r}
#| label: ocs-pet-readings
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# outside reading은 제외 (프로젝트 지침)
readings_ocs <- readings_ocs[!grepl("outside", 항목명, ignore.case = TRUE)]

# ExamDate가 NA인 경우 readings_pacs에서 복사하여 채우기
readings_ocs_na <- readings_ocs[is.na(ExamDate)]
logger::log_debug("OCS 판독 중 ExamDate NA: {nrow(readings_ocs_na)}건")

if (nrow(readings_ocs_na) > 0) {
  # 사용자정의함수로 ExamDate 복사
  readings_ocs_na_copied <- my_copy_examdate(
    na_data = readings_ocs_na,
    reference_data = readings_pacs
  )
  
  # NA가 아닌 데이터와 병합
  readings_ocs_not_na <- readings_ocs[!is.na(ExamDate)]
  readings_ocs <- rbind(readings_ocs_not_na, readings_ocs_na_copied)
  logger::log_debug("ExamDate 복사 후 총 행 수: {nrow(readings_ocs)}")
}

# 분석날짜를 준비기록과 일치하도록 2016-12-31로 제한
readings_ocs <- readings_ocs[ExamDate < as.Date("2016-12-31") & ExamDate >= as.Date("2000-07-04")]
logger::log_info("OCS PET 판독 최종 데이터: {nrow(readings_ocs)}건")

# 사용자정의 함수로 월별건수 시각화
my_plot_monthly_counts(readings_ocs, ExamDate, "OCS PET판독")

rm(readings_ocs_na, readings_ocs_not_na, readings_ocs_na_copied)

```

## OCS PET 판독건수

-   2017년 경에 전산팀으로부터 받은 자료 (이하 동문)
-   `2000-07-04`부터 OCS에 PET 판독이 입력되기 시작함
-   OCS PET 준비기록 자료가 `2016-12-31`까지여서 OCS PET 판독도 `2016-12-31`까지 분석 포함
-   외부판독은 제외함.
-   OCS PET 판독건수는 `r nrow(readings_ocs)`건
-   2006\~2007년이 비어있으며 전달받은 파일의 오류로 판단됨.

```{r}
#| label: pacs-pet-readings
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# outside PET이 포함된 경우를 제외 (프로젝트 지침)
readings_pacs <- readings_pacs[!grepl("outside", `Req. Name`, ignore.case = TRUE)]
logger::log_debug("outside PET 제외 후: {nrow(readings_pacs)}건")

# ExamDate가 NA인 경우 readings_ocs에서 복사하여 채우기
readings_pacs_na <- readings_pacs[is.na(ExamDate)]
logger::log_debug("PACS 판독 중 ExamDate NA: {nrow(readings_pacs_na)}건")

if (nrow(readings_pacs_na) > 0) {
  # 새로운 단순 함수로 ExamDate 복사
  readings_pacs_na_copied <- my_copy_examdate(
    na_data = readings_pacs_na,
    reference_data = readings_ocs
  )
  
  # NA가 아닌 데이터와 병합
  readings_pacs_not_na <- readings_pacs[!is.na(ExamDate)]
  readings_pacs <- rbind(readings_pacs_not_na, readings_pacs_na_copied)
  logger::log_debug("ExamDate 복사 후 총 행 수: {nrow(readings_pacs)}")
}

# 분석 기간으로 제한 (2003-05-12 ~ 2016-12-31)
readings_pacs <- readings_pacs[ExamDate >= as.Date("2003-05-12") & ExamDate <= as.Date("2016-12-31")]
logger::log_info("PACS PET 판독 최종 데이터: {nrow(readings_pacs)}건")

# 사용자정의 함수로 월별건수 시각화 (표준화된 컬럼명 사용)
my_plot_monthly_counts(readings_pacs, ExamDate, "PACS PET검사")

rm(readings_pacs_na, readings_pacs_not_na, readings_pacs_na_copied)

```

## PACS PET 검사기록

-   2017년 경에 전산팀으로부터 받은 자료
-   `2003-05-12`부터 PACS에 PET 영상이 등록되기 시작함
-   외부판독은 역시 제외함
-   OCS상의 PET 준비기록이 `2016-12-31`까지 여서 판독기록도 `2016-12-31`까지만을 대상으로 함
-   2006\~2007년 데이터가 온전해 보임.

```{r}
#| label: ocs-pet-preparations
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6


# na 검사하는 코드
preparations_ocs_na <- preparations_ocs[is.na(ExamDate)]
# ExamDate가 NA인 경우 ReqDate가 원래 없어 readings_ocs에서 복사하여 채우기가 안됨
# 또한 파일은 있지만 아래의 항목이 없으면 제외
preparations_ocs <- preparations_ocs[!is.na(WEIGHT) | !is.na(방사화합물) | !is.na(RADCOMPNDETC)]

my_plot_monthly_counts(preparations_ocs, ExamDate, "OCS 준비기록")
rm(preparations_ocs_na)
```

## OCS PET 준비기록

-   OCS PET 준비기록은 `2016-12-31`까지 전달받음
-   기록상으로는 `2007-12-14`부터 시작되지만 의미있는 시작은 `2010-01-04`부터임
-   외부판독의 경우 준비기록에는 포함되지 않음

```{r}
#| label: readings-ocs-pacs-comparison
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

logger::log_info("readings_ocs 기간을 readings_pacs과 같도록 2003-05-12 ~ 2016-12-31으로 진행합니다.")
readings_ocs_for_matching <- readings_ocs[ExamDate >= as.Date("2003-05-12") & ExamDate <= as.Date("2016-12-31")]
n_readings_ocs_for_matching <- nrow(readings_ocs_for_matching)
logger::log_debug("OCS 데이터 (2003-05-12~2016-12-31): {n_readings_ocs_for_matching}건")


# 중복된 PtID & ExamDate가 있는 경우를
duplicated_readings_ocs_for_matching <- readings_ocs_for_matching[readings_ocs_for_matching[, .N, by = .(PtID, ExamDate)][N > 1], on = .(PtID, ExamDate)]
logger::log_debug("중복된 readings_ocs: {nrow(duplicated_readings_ocs_for_matching)}건")
ocs_unique_keys <- unique(readings_ocs_for_matching[, .(PtID, ExamDate)])
n_ocs_unique <- nrow(ocs_unique_keys)
logger::log_debug("OCS unique keys: {n_ocs_unique}")

duplicated_readings_pacs <- readings_pacs[readings_pacs[, .N, by = .(PtID, ExamDate)][N > 1], on = .(PtID, ExamDate)]


pacs_unique_keys <- unique(readings_pacs[, .(PtID, ExamDate)])
n_pacs_unique <- nrow(pacs_unique_keys)
logger::log_debug("PACS unique keys: {n_pacs_unique}")

both_keys_dt <- ocs_unique_keys[pacs_unique_keys, on = .(PtID, ExamDate), nomatch = 0]
ocs_only <- ocs_unique_keys[!pacs_unique_keys, on = .(PtID, ExamDate)]
pacs_only <- pacs_unique_keys[!ocs_unique_keys, on = .(PtID, ExamDate)]


my_plot_monthly_counts(pacs_only, ExamDate, "PACS only")


```

## PACS와 OCS PET 검사기록 비교

-   분석기간은 readings_pacs를 기준으로 `2003-05-12` \~ `2016-12-31`
-   전체 매칭 결과: `r n_match`건
-   OCS만 있는 경우: `r n_ocs_only`건
-   PACS만 있는 경우: `r n_pacs_only`건\
-   양쪽 모두 존재 (실제 교집합): `r n_both_exist`건

```{r}
#| label: access-pet-preparations
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

my_plot_monthly_counts(preparations_access, ExamDate, "Access 준비기록")

```

## Access PET 준비기록

-   2000-01-25부터 Access에 PET 준비기록이 입력되기 시작함
-   2009-08-07까지 입력되어 있음
-   OCS에 준비기록이 입력된 후에서 연구용처럼 오더가 없는 경우는 Access로 준비/판독 되었음

```{r}
#| label: access-pet-readings-plot
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

```

```{r}
#| label: access-readings-data-cleaning
#| echo: false
#| message: false
#| warning: false



## ExamName에 PET|18F가 포함된 경우를 PET 판독으로 필터링
readings_access <- readings_access[grepl("PET|18F", ExamName, ignore.case = TRUE)]


## 사용자 정의 함수로 PtID 형식이 유효하지 않은 레코드만 추출
readings_access_invalid <- my_filter_invalid_ptid(readings_access, "PtID")

## PtID 입력오류를 수정하기 위해 reference 데이터로 preparations_access를 사용
preparations_access <- my_read_excel_dir(directory="./data/raw/preparations_access/", pattern = "\\.xlsx$")
preparations_access[, `ExamDate` := as.Date(as.numeric(`ExamDate`), origin = "1899-12-30")]
## [Hard-coded correction]
readings_access[PtName == "정경옥", ExamName := "Liver"]
readings_access[ExamDate == as.Date("1999-12-08") & PtName == "민병상", PtID := "814428"]
readings_access[ExamDate == as.Date("2002-03-04") & PtName == "김봉주", ExamDate := as.Date("2002-02-28")]
readings_access[ExamDate == as.Date("2004-03-28") & PtName == "전강진", ExamDate := as.Date("2004-03-26")]

## 복구될 수 없는 결측치 제거
preparations_access <- my_remove_invalid_rows(preparations_access)

## 사용자 정의 함수로 PtID 형식이 유효하지 않은 레코드만 추출 
preparations_access_invalid <- my_filter_invalid_ptid(preparations_access, "PtID")

## [Hard-coded correction] PtID에 PtName이 온 오류를 수정
preparations_access_invalid[PtID == "조성임", PtName := "조성임"]

readings_access_invalid[
  preparations_access[, .(PtName, ExamDate, PtID)],  # 참조 테이블에서 필요한 컬럼만 추출
  on = .(PtName, ExamDate),                # 기준 키
  PtID := i.PtID                           # 참조 테이블의 PtID로 덮어쓰기
]

## PtID 갱신: readings_access_invalid의 ID 기준으로
readings_access[
  readings_access_invalid[, .(ID, PtID)],  # ID와 새로운 PtID만 추출
  on = .(ID),                              # ID 기준으로 join
  PtID := i.PtID                           # 참조 테이블의 PtID로 갱신
]

n_readings_access <-nrow(readings_access)
first_date_readings_access <- min(readings_access$ExamDate, na.rm = TRUE)
last_date_readings_access <- max(readings_access$ExamDate, na.rm = TRUE)
```

```{r}
#| label: access-preparations-data-cleaning
#| echo: false
#| message: false
#| warning: false

preparations_access_invalid[
  readings_access[, .(PtName, ExamDate, PtID)],  # 참조 테이블에서 필요한 컬럼만 추출
  on = .(PtName, ExamDate),                # 기준 키
  PtID := i.PtID                           # 참조 테이블의 PtID로 덮어쓰기
]

remove_chars <- "[`'oㅇ.b]"
preparations_access_invalid[, PtID := gsub(remove_chars, "", PtID)]

# 1. 날짜 범위 계산
preparations_access_invalid[, `:=`(
  date_min = ExamDate - 7,
  date_max = ExamDate + 7
)]

# 2. 비이퀄 조인으로 ±7일 내 매칭
preparations_access_invalid[
  readings_access,
  on = .(PtName, date_min <= ExamDate, date_max >= ExamDate),
  PtID := i.PtID
]


## 하드코딩으로 오류 수정
preparations_access_invalid[PtName == "이재숙", PtID := "T9804211"]
preparations_access_invalid[PtName == "오경순", PtID := "908632"]
preparations_access_invalid[PtName == "강영임", PtID := "938463"]
preparations_access_invalid[PtName == "이선호", PtID := "951482"]
preparations_access_invalid[PtName == "김제순", PtID := "949996"]
preparations_access_invalid[PtName == "강종구", PtID := "885965"]
preparations_access_invalid[PtName == "홍윤표", PtID := "533195"]
preparations_access_invalid[PtName == "윤대일", PtID := "961200"]
preparations_access_invalid[PtName == "정정용", PtID := "951484"]
preparations_access[ID == "47402", ExamDate := as.Date("2007-07-31")]

## PtID 갱신: readings_access_invalid의 ID 기준으로
preparations_access[
  preparations_access_invalid[, .(ID, PtID)],  # ID와 새로운 PtID만 추출
  on = .(ID),                              # ID 기준으로 join
  PtID := i.PtID                           # 참조 테이블의 PtID로 갱신
]

preparations_access_na_Ptname <-preparations_access[is.na(PtName)]
preparations_access <-preparations_access[!is.na(PtName)]
preparations_access_na_ExamDate <-preparations_access[is.na(ExamDate)]
preparations_access <-preparations_access[!is.na(ExamDate)]

n_preparations_access <- nrow(preparations_access)
first_date_preparations_access <- min(preparations_access$ExamDate, na.rm = TRUE)
last_date_preparations_access <- max(preparations_access$ExamDate, na.rm = TRUE)
```

```{r}
#| label: data-comparison
#| echo: false
#| eval: false

# 일치하는 행만
# matched <- merge(readings_ocs, preparations_ocs, by = c("PtID", "ExamDate"))
# only_in_readings <- readings_ocs[!preparations_ocs, on = .(PtID, ExamDate)]
# only_in_preparations <- preparations_ocs[!readings_ocs, on = .(PtID, ExamDate)]



```

```{r}
#| label: matched-monthly-frequency
#| echo: false
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 6 
library(data.table)
library(ggplot2)

# 날짜 형식 확인 및 변환
matched[, ExamDate := as.Date(ExamDate)]

# 연-월을 기준으로 새 컬럼 생성
matched[, YearMonth := format(ExamDate, "%Y-%m")]

# 월별 빈도 계산
monthly_freq <- matched[, .N, by = YearMonth][order(YearMonth)]

# 그래프 그리기
ggplot(monthly_freq, aes(x = YearMonth, y = N)) +
  geom_col(fill = "steelblue") +
  theme_minimal() +
  labs(title = "월별 ExamDate 빈도", x = "연-월", y = "빈도수") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

## 분석기간설정

monthly_freq를 보면 2010년 1월부터 2016년 12월까지의 데이터가 있습니다. 따라서 분석기간은 `2010-01-01`부터 `2016-12-31`까지로 설정합니다.

```{r}
#| label: analysis-2010-2016
#| echo: false
#| message: false
#| warning: false

readings_ocs_2010_2016 <- readings_ocs[ExamDate >= as.Date("2010-01-01") & ExamDate <= as.Date("2016-12-31")]
preparations_ocs_2010_2016 <- preparations_ocs[ExamDate >= as.Date("2010-01-01") & ExamDate <= as.Date("2016-12-31")]

readings_ocs_2010_2016_only <- readings_ocs_2010_2016[!preparations_ocs_2010_2016, on = .(PtID, ExamDate)]

n_readings_ocs_2010_2016_only <- nrow(readings_ocs_2010_2016_only)
```

2010\~2016년 OCS 판독만 있고 준비기록이 없는 `r readings_ocs_2010_2016_only`례가 있습니다. 만약 준비기록이 paper로 존재한다면 보관이 필요합니다.

```{r}
#| label: analysis-2008-2009
#| echo: false
#| message: false
#| warning: false

readings_ocs_2008_2009 <- readings_ocs[ExamDate >= as.Date("2008-01-01") & ExamDate <= as.Date("2009-12-31")]
preparations_ocs_2008_2009 <- preparations_ocs[ExamDate >= as.Date("2008-01-01") & ExamDate <= as.Date("2009-12-31")]

readings_ocs_2008_2009_only <- readings_ocs_2008_2009[!preparations_ocs_2008_2009, on = .(PtID, ExamDate)]

n_readings_ocs_2008_2009_only <- nrow(readings_ocs_2008_2009_only)
```

```{r}
#| label: access-preparations-monthly-plot
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# ExamDate가 Date 형식이 아닐 경우 변환
preparations_access[, ExamDate := as.Date(ExamDate)]

# YearMonth를 Date 형식으로 추출 (첫날 기준)
preparations_access[, YearMonth := as.Date(format(ExamDate, "%Y-%m-01"))]

# 월별 빈도 계산
monthly_counts <- preparations_access[, .N, by = YearMonth][order(YearMonth)]

# 그래프 그리기
ggplot(monthly_counts, aes(x = YearMonth, y = N)) +
  geom_col(fill = "skyblue") +
  theme_minimal() +
  labs(title = "Preparations 월별 빈도", x = "연도", y = "건수") +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
#| label: pet_pacs2

pet_pacs <- my_read_excel_dir(directory="./data/raw/pet_pacs/", pattern = "\\.xlsx$")

pet_pacs[, `ExamDate` := as.Date(as.numeric(`Req. Date`), origin = "1899-12-30")]
pet_pacs <- pet_pacs[, !grepl("^[[:space:]]*$", `Req. Name`)] # Req. Name이 공백인 경우 제거

pet_pacs_na_study_date <- pet_pacs_raw %>%
  filter(is.na(`Study Date`))

pet_pacs <- pet_pacs_raw %>%
  filter(!is.na(`Study Date`))

pet_pacs_na_Age <- pet_pacs %>%
  filter(is.na(`Age`))

pet_pacs <- pet_pacs %>%
  filter(!is.na(`Age`))

pet_pacs_invalid_ptid <- my_validate_ptid (pet_pacs, "ID")

```

-   전산자료임에도 불구하고 Study Date가 NA여서 이 데이터셋을 삭제하였고
-   Age가 NA 인 경우도 삭제를 하고 진행하였습니다. N='r nrow(pet_pacs)\`

```{r}
#| label: pet_pacs

pet_pacs[, `Req. Date` := as.Date(as.numeric(`Req. Date`), origin = "1899-12-30")]
pet_pacs[, `Study Date` := as.Date(as.numeric(`Study Date`), origin = "1899-12-30")]

pet_pacs_age_y <- pet_pacs %>%
  filter(grepl("Y", Age, ignore.case = TRUE)) 

pet_pacs[, `Age` := as.numeric(`Age`),]

pet_pacs_outsdie <- pet_pacs %>%
  filter(grepl("outside", `Req. Name`, ignore.case = TRUE)) 

```

-   여기에는 outside PET가 5419 case 포함되어 있습니다.

## PET 판독소견조회 (OCR)

-   PACS의 PET 검사목록과는 별개로, OCR에서 PET 판독소견을 조회할 수 있으며, 이는 영상은 없지만 판독소견은 존재합니다.
-   OCR/핵의학체내/검사관리결과/판독소견조회 메뉴를 사용하면 됩니다.
-   `2000-07-04`부터 조회됩니다.
-   전산팀으로부터 받은 자료를 통합해서 readings_ocr이란 데이터테이블로 만들었습니다.

```{r}
#| label: readings-ocr-na

colSums(is.na(readings_ocr))
readings_ocr_na <- readings_ocr %>%
  filter(is.na(실시일시))

```

-   특이하게도 2009년 12월에 주로 처방한 데이터셋의 일부에서 실시일시 NA가 발견되었습니다.

```{r}
#| label: as.Date
 

readings_ocr <- readings_ocr %>%
  mutate(
    처방일자 = as.Date(처방일자),
    실시일시 = as.Date(실시일시)
  )

readings_ocr <- readings_ocr %>%
  filter(!grepl("Y", 나이, ignore.case = TRUE)) %>%
  mutate(나이 = as.numeric(나이))

readings_ocr_invalid_ptid <- my_validate_ptid (readings_ocr, "환자번호")

```

## PET 검사기록지관리 (매뉴얼)

-   OCR/핵의학체내/검사관리/검사기록지관리 메뉴
-   PET 검사기록지가 조회가 되기 시작하는 것이 대략적으로 2007-09-27 부터입니다.
-   2007-09-27 이후라고 할지라도 2009년경까지는 일부는 검사기록지가 있고 일부는 없고 일관성 없습니다.
-   전산팀으로부터 전달받은 자료를 `preparation_ocr`로 읽어 드립니다.

## PET 준비기록 at Access database

-   핵의학과에서는 PET 준비기록 및 판독을 Access로 관리했다가 병원전산으로 이관되었음 (정확한 기준일은 모름)
-   Access 상의 PET 준비기록은 2000-01-25부터 존재하지만 실제적인 입력은 `2000-05-02`부터 된 것으로 판단됨.
-   Access 상의 PET 준비기록은 `2009-08-07`까지 존재함

## PET 검사목록의 확보

-   2003\~2016년 PACS 상 PET 검사기록 (전산팀 유래)

## PET 준비기록 보존 전략

-   따라서 PET 준비기록도 최소한 `2003-05-12`부터 보존하는 전략이 필요

```{r}
#| label: load-preparation-access
#| 
library(readxl)
preperation_raw <- read_excel("./data/access/PET_Preparation_Information_on_Access.xlsx")
preperation_access <- subset(preperation_raw, !is.na(PtID) & !is.na(ExamDate))
preperation_access_since_030512 <- preperation_access %>%
    mutate(ExamDate = as.Date(ExamDate)) %>%
  filter(ExamDate >= as.Date("2005-03-12"))
```

## PET 판독/준비기록 PACS/OCS 이관

원자력병원 핵의학과에 PET이 설치된 당시에 판독은 Microsoft사의 Access database에 감마와 PET 판독을 입력하는 시스템을 사용했습니다. Access 상의 최초 PET ExamDate는 `1997-07-16`입니다. 50년사에는 PET 기동식이 `1997-08-02`로 기록되어 있으며 날짜를 비교해보면 기동식 이전에 판독입력은 약 2주전부터 이미 시작되었습니다.)

2000년 경에 EMR (Electric Medical Record)과 함께 OCS(Order Communication System)이 도입되었습니다. 이 때부터 오더가 있는 공식적인 판독은 OCS에 입력을 하게 됩니다. 하지만 당시에는 연구목적의 PET 등은 오더가 대부분 없었기 때문에 이런 경우들은 Access에 입력을 하게 됩니다. 따라서 OCS상의 최초 판독일은 `2000-07-04`이지만 Access 판독은 `2009-07-09`까지 존재합니다.

2003년 경에는 PACS가 도입됩니다. 이때부터 판독입력은 PACS에 직접 입력하게 되지만 결국은 OCS에도 저장되므로 판독기록의 보존이라는 측면에서는 차이가 없는셈입니다. 다만 Legacy PET Imaging Archive System 이외에 공식적인 PET(/CT) 저장이 새로 생겼다는 차이가 있습니다. 사실 Legacy PET Imaging Archive System은 magnetic tape, optical magnetic disk, CD 등으로 변모해왔지만 오랜시간이 경과하여 오류률이 높아서 실제 사용이 어렵기 때문에 PACS에 PET/CT image가 저장된다는 것은 상당한 장점이 있습니다.

마지막으로 NM miniPACS에도 영상기록이 보존되어 있습니다. 공식적으로 저장되기 시작한 날짜는 확인이 필요합니다. 영상보관면에서는 PET sinogram은 아니지만 reconstructed low data가 저장되어 있으므로 그러한 장점이 있습니다. 한가지 명확하지 않은 것은 reseach PET data의 경우 NM miniPACS에 저장하는 것도 고려됩니다.
